!extern lua_State *(lua_newstate) (lua_Alloc f, void *ud)
FUNCTION lua_newstate(f1, ud2) BIND(C, name="lua_newstate")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_FUNPTR, C_PTR
IMPLICIT NONE
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: f1
TYPE(C_PTR), VALUE, INTENT(IN) :: ud2
TYPE(C_PTR) :: lua_newstate
END FUNCTION lua_newstate

!extern void (lua_close) (lua_State *L)
SUBROUTINE lua_close(L1) BIND(C, name="lua_close")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
END SUBROUTINE lua_close

!extern lua_State *(lua_newthread) (lua_State *L)
FUNCTION lua_newthread(L1) BIND(C, name="lua_newthread")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_PTR) :: lua_newthread
END FUNCTION lua_newthread

!extern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf)
FUNCTION lua_atpanic(L1, panicf2) BIND(C, name="lua_atpanic")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: panicf2
TYPE(C_FUNPTR) :: lua_atpanic
END FUNCTION lua_atpanic

!extern int (lua_gettop) (lua_State *L)
FUNCTION lua_gettop(L1) BIND(C, name="lua_gettop")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: lua_gettop
END FUNCTION lua_gettop

!extern void (lua_settop) (lua_State *L, int idx)
SUBROUTINE lua_settop(L1, idx2) BIND(C, name="lua_settop")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_settop

!extern void (lua_pushvalue) (lua_State *L, int idx)
SUBROUTINE lua_pushvalue(L1, idx2) BIND(C, name="lua_pushvalue")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_pushvalue

!extern void (lua_remove) (lua_State *L, int idx)
SUBROUTINE lua_remove(L1, idx2) BIND(C, name="lua_remove")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_remove

!extern void (lua_insert) (lua_State *L, int idx)
SUBROUTINE lua_insert(L1, idx2) BIND(C, name="lua_insert")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_insert

!extern void (lua_replace) (lua_State *L, int idx)
SUBROUTINE lua_replace(L1, idx2) BIND(C, name="lua_replace")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_replace

!extern int (lua_checkstack) (lua_State *L, int sz)
FUNCTION lua_checkstack(L1, sz2) BIND(C, name="lua_checkstack")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: sz2
INTEGER(KIND=C_INT) :: lua_checkstack
END FUNCTION lua_checkstack

!extern void (lua_xmove) (lua_State *from, lua_State *to, int n)
SUBROUTINE lua_xmove(from1, to2, n3) BIND(C, name="lua_xmove")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: from1
TYPE(C_PTR), VALUE, INTENT(IN) :: to2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
END SUBROUTINE lua_xmove

!extern int (lua_isnumber) (lua_State *L, int idx)
FUNCTION lua_isnumber(L1, idx2) BIND(C, name="lua_isnumber")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_isnumber
END FUNCTION lua_isnumber

!extern int (lua_isstring) (lua_State *L, int idx)
FUNCTION lua_isstring(L1, idx2) BIND(C, name="lua_isstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_isstring
END FUNCTION lua_isstring

!extern int (lua_iscfunction) (lua_State *L, int idx)
FUNCTION lua_iscfunction(L1, idx2) BIND(C, name="lua_iscfunction")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_iscfunction
END FUNCTION lua_iscfunction

!extern int (lua_isuserdata) (lua_State *L, int idx)
FUNCTION lua_isuserdata(L1, idx2) BIND(C, name="lua_isuserdata")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_isuserdata
END FUNCTION lua_isuserdata

!extern int (lua_type) (lua_State *L, int idx)
FUNCTION lua_type(L1, idx2) BIND(C, name="lua_type")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_type
END FUNCTION lua_type

!extern const char *(lua_typename) (lua_State *L, int tp)
FUNCTION lua_typename(L1, tp2) BIND(C, name="lua_typename")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: tp2
TYPE(C_PTR) :: lua_typename
END FUNCTION lua_typename

!extern int (lua_equal) (lua_State *L, int idx1, int idx2)
FUNCTION lua_equal(L1, idx12, idx23) BIND(C, name="lua_equal")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx12
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx23
INTEGER(KIND=C_INT) :: lua_equal
END FUNCTION lua_equal

!extern int (lua_rawequal) (lua_State *L, int idx1, int idx2)
FUNCTION lua_rawequal(L1, idx12, idx23) BIND(C, name="lua_rawequal")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx12
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx23
INTEGER(KIND=C_INT) :: lua_rawequal
END FUNCTION lua_rawequal

!extern int (lua_lessthan) (lua_State *L, int idx1, int idx2)
FUNCTION lua_lessthan(L1, idx12, idx23) BIND(C, name="lua_lessthan")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx12
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx23
INTEGER(KIND=C_INT) :: lua_lessthan
END FUNCTION lua_lessthan

!extern lua_Number (lua_tonumber) (lua_State *L, int idx)
FUNCTION lua_tonumber(L1, idx2) BIND(C, name="lua_tonumber")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_DOUBLE
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
REAL(KIND=C_DOUBLE) :: lua_tonumber
END FUNCTION lua_tonumber

!extern lua_Integer (lua_tointeger) (lua_State *L, int idx)
FUNCTION lua_tointeger(L1, idx2) BIND(C, name="lua_tointeger")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_INTPTR_T
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INTPTR_T) :: lua_tointeger
END FUNCTION lua_tointeger

!extern int (lua_toboolean) (lua_State *L, int idx)
FUNCTION lua_toboolean(L1, idx2) BIND(C, name="lua_toboolean")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_toboolean
END FUNCTION lua_toboolean

!extern const char *(lua_tolstring) (lua_State *L, int idx, size_t *len)
FUNCTION lua_tolstring(L1, idx2, len3) BIND(C, name="lua_tolstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
TYPE(C_PTR), VALUE, INTENT(IN) :: len3
TYPE(C_PTR) :: lua_tolstring
END FUNCTION lua_tolstring

!extern size_t (lua_objlen) (lua_State *L, int idx)
FUNCTION lua_objlen(L1, idx2) BIND(C, name="lua_objlen")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_SIZE_T
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_SIZE_T) :: lua_objlen
END FUNCTION lua_objlen

!extern lua_CFunction (lua_tocfunction) (lua_State *L, int idx)
FUNCTION lua_tocfunction(L1, idx2) BIND(C, name="lua_tocfunction")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_FUNPTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
TYPE(C_FUNPTR) :: lua_tocfunction
END FUNCTION lua_tocfunction

!extern void *(lua_touserdata) (lua_State *L, int idx)
FUNCTION lua_touserdata(L1, idx2) BIND(C, name="lua_touserdata")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
TYPE(C_PTR) :: lua_touserdata
END FUNCTION lua_touserdata

!extern lua_State *(lua_tothread) (lua_State *L, int idx)
FUNCTION lua_tothread(L1, idx2) BIND(C, name="lua_tothread")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
TYPE(C_PTR) :: lua_tothread
END FUNCTION lua_tothread

!extern const void *(lua_topointer) (lua_State *L, int idx)
FUNCTION lua_topointer(L1, idx2) BIND(C, name="lua_topointer")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
TYPE(C_PTR) :: lua_topointer
END FUNCTION lua_topointer

!extern void (lua_pushnil) (lua_State *L)
SUBROUTINE lua_pushnil(L1) BIND(C, name="lua_pushnil")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
END SUBROUTINE lua_pushnil

!extern void (lua_pushnumber) (lua_State *L, lua_Number n)
SUBROUTINE lua_pushnumber(L1, n2) BIND(C, name="lua_pushnumber")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_DOUBLE
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
REAL(KIND=C_DOUBLE), VALUE, INTENT(IN) :: n2
END SUBROUTINE lua_pushnumber

!extern void (lua_pushinteger) (lua_State *L, lua_Integer n)
SUBROUTINE lua_pushinteger(L1, n2) BIND(C, name="lua_pushinteger")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INTPTR_T
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INTPTR_T), VALUE, INTENT(IN) :: n2
END SUBROUTINE lua_pushinteger

!extern void (lua_pushlstring) (lua_State *L, const char *s, size_t l)
SUBROUTINE lua_pushlstring(L1, s2, l3) BIND(C, name="lua_pushlstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR, C_SIZE_T
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: s2
INTEGER(KIND=C_SIZE_T), VALUE, INTENT(IN) :: l3
END SUBROUTINE lua_pushlstring

!extern void (lua_pushstring) (lua_State *L, const char *s)
SUBROUTINE lua_pushstring(L1, s2) BIND(C, name="lua_pushstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: s2
END SUBROUTINE lua_pushstring

!extern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
!                                                      va_list argp)
! Failed to map type va_list

!extern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...)
! Failed to map variadic function

!extern void (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n)
SUBROUTINE lua_pushcclosure(L1, fn2, n3) BIND(C, name="lua_pushcclosure")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: fn2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
END SUBROUTINE lua_pushcclosure

!extern void (lua_pushboolean) (lua_State *L, int b)
SUBROUTINE lua_pushboolean(L1, b2) BIND(C, name="lua_pushboolean")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: b2
END SUBROUTINE lua_pushboolean

!extern void (lua_pushlightuserdata) (lua_State *L, void *p)
SUBROUTINE lua_pushlightuserdata(L1, p2) BIND(C, name="lua_pushlightuserdata")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_PTR), VALUE, INTENT(IN) :: p2
END SUBROUTINE lua_pushlightuserdata

!extern int (lua_pushthread) (lua_State *L)
FUNCTION lua_pushthread(L1) BIND(C, name="lua_pushthread")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: lua_pushthread
END FUNCTION lua_pushthread

!extern void (lua_gettable) (lua_State *L, int idx)
SUBROUTINE lua_gettable(L1, idx2) BIND(C, name="lua_gettable")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_gettable

!extern void (lua_getfield) (lua_State *L, int idx, const char *k)
SUBROUTINE lua_getfield(L1, idx2, k3) BIND(C, name="lua_getfield")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: k3
END SUBROUTINE lua_getfield

!extern void (lua_rawget) (lua_State *L, int idx)
SUBROUTINE lua_rawget(L1, idx2) BIND(C, name="lua_rawget")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_rawget

!extern void (lua_rawgeti) (lua_State *L, int idx, int n)
SUBROUTINE lua_rawgeti(L1, idx2, n3) BIND(C, name="lua_rawgeti")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
END SUBROUTINE lua_rawgeti

!extern void (lua_createtable) (lua_State *L, int narr, int nrec)
SUBROUTINE lua_createtable(L1, narr2, nrec3) BIND(C, name="lua_createtable")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: narr2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nrec3
END SUBROUTINE lua_createtable

!extern void *(lua_newuserdata) (lua_State *L, size_t sz)
FUNCTION lua_newuserdata(L1, sz2) BIND(C, name="lua_newuserdata")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_SIZE_T
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_SIZE_T), VALUE, INTENT(IN) :: sz2
TYPE(C_PTR) :: lua_newuserdata
END FUNCTION lua_newuserdata

!extern int (lua_getmetatable) (lua_State *L, int objindex)
FUNCTION lua_getmetatable(L1, objindex2) BIND(C, name="lua_getmetatable")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: objindex2
INTEGER(KIND=C_INT) :: lua_getmetatable
END FUNCTION lua_getmetatable

!extern void (lua_getfenv) (lua_State *L, int idx)
SUBROUTINE lua_getfenv(L1, idx2) BIND(C, name="lua_getfenv")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_getfenv

!extern void (lua_settable) (lua_State *L, int idx)
SUBROUTINE lua_settable(L1, idx2) BIND(C, name="lua_settable")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_settable

!extern void (lua_setfield) (lua_State *L, int idx, const char *k)
SUBROUTINE lua_setfield(L1, idx2, k3) BIND(C, name="lua_setfield")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: k3
END SUBROUTINE lua_setfield

!extern void (lua_rawset) (lua_State *L, int idx)
SUBROUTINE lua_rawset(L1, idx2) BIND(C, name="lua_rawset")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
END SUBROUTINE lua_rawset

!extern void (lua_rawseti) (lua_State *L, int idx, int n)
SUBROUTINE lua_rawseti(L1, idx2, n3) BIND(C, name="lua_rawseti")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
END SUBROUTINE lua_rawseti

!extern int (lua_setmetatable) (lua_State *L, int objindex)
FUNCTION lua_setmetatable(L1, objindex2) BIND(C, name="lua_setmetatable")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: objindex2
INTEGER(KIND=C_INT) :: lua_setmetatable
END FUNCTION lua_setmetatable

!extern int (lua_setfenv) (lua_State *L, int idx)
FUNCTION lua_setfenv(L1, idx2) BIND(C, name="lua_setfenv")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_setfenv
END FUNCTION lua_setfenv

!extern void (lua_call) (lua_State *L, int nargs, int nresults)
SUBROUTINE lua_call(L1, nargs2, nresults3) BIND(C, name="lua_call")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nargs2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nresults3
END SUBROUTINE lua_call

!extern int (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc)
FUNCTION lua_pcall(L1, nargs2, nresults3, errfunc4) BIND(C, name="lua_pcall")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nargs2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nresults3
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: errfunc4
INTEGER(KIND=C_INT) :: lua_pcall
END FUNCTION lua_pcall

!extern int (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud)
FUNCTION lua_cpcall(L1, func2, ud3) BIND(C, name="lua_cpcall")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: func2
TYPE(C_PTR), VALUE, INTENT(IN) :: ud3
INTEGER(KIND=C_INT) :: lua_cpcall
END FUNCTION lua_cpcall

!extern int (lua_load) (lua_State *L, lua_Reader reader, void *dt,
!                                        const char *chunkname)
FUNCTION lua_load(L1, reader2, dt3, chunkname4) BIND(C, name="lua_load")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR, C_CHAR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: reader2
TYPE(C_PTR), VALUE, INTENT(IN) :: dt3
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: chunkname4
INTEGER(KIND=C_INT) :: lua_load
END FUNCTION lua_load

!extern int (lua_dump) (lua_State *L, lua_Writer writer, void *data)
FUNCTION lua_dump(L1, writer2, data3) BIND(C, name="lua_dump")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: writer2
TYPE(C_PTR), VALUE, INTENT(IN) :: data3
INTEGER(KIND=C_INT) :: lua_dump
END FUNCTION lua_dump

!extern int (lua_yield) (lua_State *L, int nresults)
FUNCTION lua_yield1(L1, nresults2) BIND(C, name="lua_yield")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nresults2
INTEGER(KIND=C_INT) :: lua_yield1
END FUNCTION lua_yield1

!extern int (lua_resume) (lua_State *L, int narg)
FUNCTION lua_resume(L1, narg2) BIND(C, name="lua_resume")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: narg2
INTEGER(KIND=C_INT) :: lua_resume
END FUNCTION lua_resume

!extern int (lua_status) (lua_State *L)
FUNCTION lua_status(L1) BIND(C, name="lua_status")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: lua_status
END FUNCTION lua_status

!extern int (lua_gc) (lua_State *L, int what, int data)
FUNCTION lua_gc(L1, what2, data3) BIND(C, name="lua_gc")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: what2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: data3
INTEGER(KIND=C_INT) :: lua_gc
END FUNCTION lua_gc

!extern int (lua_error) (lua_State *L)
FUNCTION lua_error(L1) BIND(C, name="lua_error")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: lua_error
END FUNCTION lua_error

!extern int (lua_next) (lua_State *L, int idx)
FUNCTION lua_next(L1, idx2) BIND(C, name="lua_next")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
INTEGER(KIND=C_INT) :: lua_next
END FUNCTION lua_next

!extern void (lua_concat) (lua_State *L, int n)
SUBROUTINE lua_concat(L1, n2) BIND(C, name="lua_concat")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n2
END SUBROUTINE lua_concat

!extern lua_Alloc (lua_getallocf) (lua_State *L, void **ud)
FUNCTION lua_getallocf(L1, ud2) BIND(C, name="lua_getallocf")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_PTR), VALUE, INTENT(IN) :: ud2
TYPE(C_FUNPTR) :: lua_getallocf
END FUNCTION lua_getallocf

!extern void lua_setallocf (lua_State *L, lua_Alloc f, void *ud)
SUBROUTINE lua_setallocf(L1, f2, ud3) BIND(C, name="lua_setallocf")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: f2
TYPE(C_PTR), VALUE, INTENT(IN) :: ud3
END SUBROUTINE lua_setallocf

!extern void lua_setlevel (lua_State *from, lua_State *to)
SUBROUTINE lua_setlevel(from1, to2) BIND(C, name="lua_setlevel")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: from1
TYPE(C_PTR), VALUE, INTENT(IN) :: to2
END SUBROUTINE lua_setlevel

!extern int lua_getstack (lua_State *L, int level, lua_Debug *ar)
FUNCTION lua_getstack(L1, level2, ar3) BIND(C, name="lua_getstack")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
USE LUAF_TYPES, ONLY: lua_Debug
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: level2
TYPE(lua_Debug), INTENT(INOUT) :: ar3
INTEGER(KIND=C_INT) :: lua_getstack
END FUNCTION lua_getstack

!extern int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar)
FUNCTION lua_getinfo(L1, what2, ar3) BIND(C, name="lua_getinfo")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR, C_INT
USE LUAF_TYPES, ONLY: lua_Debug
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: what2
TYPE(lua_Debug), INTENT(INOUT) :: ar3
INTEGER(KIND=C_INT) :: lua_getinfo
END FUNCTION lua_getinfo

!extern const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n)
FUNCTION lua_getlocal(L1, ar2, n3) BIND(C, name="lua_getlocal")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
USE LUAF_TYPES, ONLY: lua_Debug
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(lua_Debug), INTENT(IN) :: ar2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
TYPE(C_PTR) :: lua_getlocal
END FUNCTION lua_getlocal

!extern const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n)
FUNCTION lua_setlocal(L1, ar2, n3) BIND(C, name="lua_setlocal")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
USE LUAF_TYPES, ONLY: lua_Debug
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(lua_Debug), INTENT(IN) :: ar2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
TYPE(C_PTR) :: lua_setlocal
END FUNCTION lua_setlocal

!extern const char *lua_getupvalue (lua_State *L, int funcindex, int n)
FUNCTION lua_getupvalue(L1, funcindex2, n3) BIND(C, name="lua_getupvalue")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: funcindex2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
TYPE(C_PTR) :: lua_getupvalue
END FUNCTION lua_getupvalue

!extern const char *lua_setupvalue (lua_State *L, int funcindex, int n)
FUNCTION lua_setupvalue(L1, funcindex2, n3) BIND(C, name="lua_setupvalue")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: funcindex2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: n3
TYPE(C_PTR) :: lua_setupvalue
END FUNCTION lua_setupvalue

!extern int lua_sethook (lua_State *L, lua_Hook func, int mask, int count)
FUNCTION lua_sethook(L1, func2, mask3, count4) BIND(C, name="lua_sethook")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR), VALUE, INTENT(IN) :: func2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: mask3
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: count4
INTEGER(KIND=C_INT) :: lua_sethook
END FUNCTION lua_sethook

!extern lua_Hook lua_gethook (lua_State *L)
FUNCTION lua_gethook(L1) BIND(C, name="lua_gethook")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_FUNPTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_FUNPTR) :: lua_gethook
END FUNCTION lua_gethook

!extern int lua_gethookmask (lua_State *L)
FUNCTION lua_gethookmask(L1) BIND(C, name="lua_gethookmask")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: lua_gethookmask
END FUNCTION lua_gethookmask

!extern int lua_gethookcount (lua_State *L)
FUNCTION lua_gethookcount(L1) BIND(C, name="lua_gethookcount")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: lua_gethookcount
END FUNCTION lua_gethookcount

!extern int (luaopen_base) (lua_State *L)
FUNCTION luaopen_base(L1) BIND(C, name="luaopen_base")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_base
END FUNCTION luaopen_base

!extern int (luaopen_table) (lua_State *L)
FUNCTION luaopen_table(L1) BIND(C, name="luaopen_table")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_table
END FUNCTION luaopen_table

!extern int (luaopen_io) (lua_State *L)
FUNCTION luaopen_io(L1) BIND(C, name="luaopen_io")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_io
END FUNCTION luaopen_io

!extern int (luaopen_os) (lua_State *L)
FUNCTION luaopen_os(L1) BIND(C, name="luaopen_os")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_os
END FUNCTION luaopen_os

!extern int (luaopen_string) (lua_State *L)
FUNCTION luaopen_string(L1) BIND(C, name="luaopen_string")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_string
END FUNCTION luaopen_string

!extern int (luaopen_math) (lua_State *L)
FUNCTION luaopen_math(L1) BIND(C, name="luaopen_math")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_math
END FUNCTION luaopen_math

!extern int (luaopen_debug) (lua_State *L)
FUNCTION luaopen_debug(L1) BIND(C, name="luaopen_debug")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_debug
END FUNCTION luaopen_debug

!extern int (luaopen_package) (lua_State *L)
FUNCTION luaopen_package(L1) BIND(C, name="luaopen_package")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT) :: luaopen_package
END FUNCTION luaopen_package

!extern void (luaL_openlibs) (lua_State *L)
SUBROUTINE luaL_openlibs(L1) BIND(C, name="luaL_openlibs")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
END SUBROUTINE luaL_openlibs

!extern void (luaL_openlib) (lua_State *L, const char *libname,
!                                const luaL_Reg *l, int nup)
SUBROUTINE luaL_openlib(L1, libname2, l3, nup4) BIND(C, name="luaL_openlib")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR, C_INT
USE LUAF_TYPES, ONLY: luaL_Reg
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: libname2
TYPE(luaL_Reg), DIMENSION(*), INTENT(IN) :: l3
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nup4
END SUBROUTINE luaL_openlib

!extern void (luaL_register) (lua_State *L, const char *libname,
!                                const luaL_Reg *l)
SUBROUTINE luaL_register(L1, libname2, l3) BIND(C, name="luaL_register")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
USE LUAF_TYPES, ONLY: luaL_Reg
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_PTR), VALUE, INTENT(IN) :: libname2
TYPE(luaL_Reg), DIMENSION(*), INTENT(IN) :: l3
END SUBROUTINE luaL_register

!extern int (luaL_getmetafield) (lua_State *L, int obj, const char *e)
FUNCTION luaL_getmetafield(L1, obj2, e3) BIND(C, name="luaL_getmetafield")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: obj2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: e3
INTEGER(KIND=C_INT) :: luaL_getmetafield
END FUNCTION luaL_getmetafield

!extern int (luaL_callmeta) (lua_State *L, int obj, const char *e)
FUNCTION luaL_callmeta(L1, obj2, e3) BIND(C, name="luaL_callmeta")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: obj2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: e3
INTEGER(KIND=C_INT) :: luaL_callmeta
END FUNCTION luaL_callmeta

!extern int (luaL_typerror) (lua_State *L, int narg, const char *tname)
FUNCTION luaL_typerror(L1, narg2, tname3) BIND(C, name="luaL_typerror")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: narg2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: tname3
INTEGER(KIND=C_INT) :: luaL_typerror
END FUNCTION luaL_typerror

!extern int (luaL_argerror) (lua_State *L, int numarg, const char *extramsg)
FUNCTION luaL_argerror(L1, numarg2, extramsg3) BIND(C, name="luaL_argerror")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: numarg2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: extramsg3
INTEGER(KIND=C_INT) :: luaL_argerror
END FUNCTION luaL_argerror

!extern const char *(luaL_checklstring) (lua_State *L, int numArg,
!                                                          size_t *l)
FUNCTION luaL_checklstring(L1, numArg2, l3) BIND(C, name="luaL_checklstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: numArg2
TYPE(C_PTR), VALUE, INTENT(IN) :: l3
TYPE(C_PTR) :: luaL_checklstring
END FUNCTION luaL_checklstring

!extern const char *(luaL_optlstring) (lua_State *L, int numArg,
!                                          const char *def, size_t *l)
FUNCTION luaL_optlstring(L1, numArg2, def3, l4) BIND(C, name="luaL_optlstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: numArg2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: def3
TYPE(C_PTR), VALUE, INTENT(IN) :: l4
TYPE(C_PTR) :: luaL_optlstring
END FUNCTION luaL_optlstring

!extern lua_Number (luaL_checknumber) (lua_State *L, int numArg)
FUNCTION luaL_checknumber(L1, numArg2) BIND(C, name="luaL_checknumber")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_DOUBLE
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: numArg2
REAL(KIND=C_DOUBLE) :: luaL_checknumber
END FUNCTION luaL_checknumber

!extern lua_Number (luaL_optnumber) (lua_State *L, int nArg, lua_Number def)
FUNCTION luaL_optnumber(L1, nArg2, def3) BIND(C, name="luaL_optnumber")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_DOUBLE
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nArg2
REAL(KIND=C_DOUBLE), VALUE, INTENT(IN) :: def3
REAL(KIND=C_DOUBLE) :: luaL_optnumber
END FUNCTION luaL_optnumber

!extern lua_Integer (luaL_checkinteger) (lua_State *L, int numArg)
FUNCTION luaL_checkinteger(L1, numArg2) BIND(C, name="luaL_checkinteger")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_INTPTR_T
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: numArg2
INTEGER(KIND=C_INTPTR_T) :: luaL_checkinteger
END FUNCTION luaL_checkinteger

!extern lua_Integer (luaL_optinteger) (lua_State *L, int nArg,
!                                          lua_Integer def)
FUNCTION luaL_optinteger(L1, nArg2, def3) BIND(C, name="luaL_optinteger")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_INTPTR_T
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: nArg2
INTEGER(KIND=C_INTPTR_T), VALUE, INTENT(IN) :: def3
INTEGER(KIND=C_INTPTR_T) :: luaL_optinteger
END FUNCTION luaL_optinteger

!extern void (luaL_checkstack) (lua_State *L, int sz, const char *msg)
SUBROUTINE luaL_checkstack(L1, sz2, msg3) BIND(C, name="luaL_checkstack")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: sz2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: msg3
END SUBROUTINE luaL_checkstack

!extern void (luaL_checktype) (lua_State *L, int narg, int t)
SUBROUTINE luaL_checktype(L1, narg2, t3) BIND(C, name="luaL_checktype")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: narg2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: t3
END SUBROUTINE luaL_checktype

!extern void (luaL_checkany) (lua_State *L, int narg)
SUBROUTINE luaL_checkany(L1, narg2) BIND(C, name="luaL_checkany")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: narg2
END SUBROUTINE luaL_checkany

!extern int (luaL_newmetatable) (lua_State *L, const char *tname)
FUNCTION luaL_newmetatable(L1, tname2) BIND(C, name="luaL_newmetatable")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: tname2
INTEGER(KIND=C_INT) :: luaL_newmetatable
END FUNCTION luaL_newmetatable

!extern void *(luaL_checkudata) (lua_State *L, int ud, const char *tname)
FUNCTION luaL_checkudata(L1, ud2, tname3) BIND(C, name="luaL_checkudata")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: ud2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: tname3
TYPE(C_PTR) :: luaL_checkudata
END FUNCTION luaL_checkudata

!extern void (luaL_where) (lua_State *L, int lvl)
SUBROUTINE luaL_where(L1, lvl2) BIND(C, name="luaL_where")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: lvl2
END SUBROUTINE luaL_where

!extern int (luaL_error) (lua_State *L, const char *fmt, ...)
! Failed to map variadic function

!extern int (luaL_checkoption) (lua_State *L, int narg, const char *def,
!                                   const char *const lst[])
FUNCTION luaL_checkoption(L1, narg2, def3, lst4) BIND(C, name="luaL_checkoption")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: narg2
TYPE(C_PTR), VALUE, INTENT(IN) :: def3
TYPE(C_PTR), DIMENSION(*), INTENT(IN) :: lst4
INTEGER(KIND=C_INT) :: luaL_checkoption
END FUNCTION luaL_checkoption

!extern int (luaL_ref) (lua_State *L, int t)
FUNCTION luaL_ref(L1, t2) BIND(C, name="luaL_ref")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: t2
INTEGER(KIND=C_INT) :: luaL_ref
END FUNCTION luaL_ref

!extern void (luaL_unref) (lua_State *L, int t, int ref)
SUBROUTINE luaL_unref(L1, t2, ref3) BIND(C, name="luaL_unref")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: t2
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: ref3
END SUBROUTINE luaL_unref

!extern int (luaL_loadfile) (lua_State *L, const char *filename)
FUNCTION luaL_loadfile(L1, filename2) BIND(C, name="luaL_loadfile")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(C_PTR), VALUE, INTENT(IN) :: filename2
INTEGER(KIND=C_INT) :: luaL_loadfile
END FUNCTION luaL_loadfile

!extern int (luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz,
!                                  const char *name)
FUNCTION luaL_loadbuffer(L1, buff2, sz3, name4) BIND(C, name="luaL_loadbuffer")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR, C_SIZE_T, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: buff2
INTEGER(KIND=C_SIZE_T), VALUE, INTENT(IN) :: sz3
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: name4
INTEGER(KIND=C_INT) :: luaL_loadbuffer
END FUNCTION luaL_loadbuffer

!extern int (luaL_loadstring) (lua_State *L, const char *s)
FUNCTION luaL_loadstring(L1, s2) BIND(C, name="luaL_loadstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR, C_INT
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: s2
INTEGER(KIND=C_INT) :: luaL_loadstring
END FUNCTION luaL_loadstring

!extern lua_State *(luaL_newstate) (void)
FUNCTION luaL_newstate() BIND(C, name="luaL_newstate")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
IMPLICIT NONE
TYPE(C_PTR) :: luaL_newstate
END FUNCTION luaL_newstate

!extern const char *(luaL_gsub) (lua_State *L, const char *s, const char *p,
!                                                  const char *r)
FUNCTION luaL_gsub(L1, s2, p3, r4) BIND(C, name="luaL_gsub")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: s2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: p3
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: r4
TYPE(C_PTR) :: luaL_gsub
END FUNCTION luaL_gsub

!extern const char *(luaL_findtable) (lua_State *L, int idx,
!                                         const char *fname, int szhint)
FUNCTION luaL_findtable(L1, idx2, fname3, szhint4) BIND(C, name="luaL_findtable")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR, C_INT, C_CHAR
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: idx2
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: fname3
INTEGER(KIND=C_INT), VALUE, INTENT(IN) :: szhint4
TYPE(C_PTR) :: luaL_findtable
END FUNCTION luaL_findtable

!extern void (luaL_buffinit) (lua_State *L, luaL_Buffer *B)
SUBROUTINE luaL_buffinit(L1, B2) BIND(C, name="luaL_buffinit")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
USE LUAF_TYPES, ONLY: luaL_Buffer
IMPLICIT NONE
TYPE(C_PTR), VALUE, INTENT(IN) :: L1
TYPE(luaL_Buffer), INTENT(INOUT) :: B2
END SUBROUTINE luaL_buffinit

!extern char *(luaL_prepbuffer) (luaL_Buffer *B)
FUNCTION luaL_prepbuffer(B1) BIND(C, name="luaL_prepbuffer")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_PTR
USE LUAF_TYPES, ONLY: luaL_Buffer
IMPLICIT NONE
TYPE(luaL_Buffer), INTENT(INOUT) :: B1
TYPE(C_PTR) :: luaL_prepbuffer
END FUNCTION luaL_prepbuffer

!extern void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l)
SUBROUTINE luaL_addlstring(B1, s2, l3) BIND(C, name="luaL_addlstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_CHAR, C_SIZE_T
USE LUAF_TYPES, ONLY: luaL_Buffer
IMPLICIT NONE
TYPE(luaL_Buffer), INTENT(INOUT) :: B1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: s2
INTEGER(KIND=C_SIZE_T), VALUE, INTENT(IN) :: l3
END SUBROUTINE luaL_addlstring

!extern void (luaL_addstring) (luaL_Buffer *B, const char *s)
SUBROUTINE luaL_addstring(B1, s2) BIND(C, name="luaL_addstring")
USE, INTRINSIC :: ISO_C_BINDING, ONLY: C_CHAR
USE LUAF_TYPES, ONLY: luaL_Buffer
IMPLICIT NONE
TYPE(luaL_Buffer), INTENT(INOUT) :: B1
CHARACTER(KIND=C_CHAR, LEN=1), DIMENSION(*), INTENT(IN) :: s2
END SUBROUTINE luaL_addstring

!extern void (luaL_addvalue) (luaL_Buffer *B)
SUBROUTINE luaL_addvalue(B1) BIND(C, name="luaL_addvalue")
USE LUAF_TYPES, ONLY: luaL_Buffer
IMPLICIT NONE
TYPE(luaL_Buffer), INTENT(INOUT) :: B1
END SUBROUTINE luaL_addvalue

!extern void (luaL_pushresult) (luaL_Buffer *B)
SUBROUTINE luaL_pushresult(B1) BIND(C, name="luaL_pushresult")
USE LUAF_TYPES, ONLY: luaL_Buffer
IMPLICIT NONE
TYPE(luaL_Buffer), INTENT(INOUT) :: B1
END SUBROUTINE luaL_pushresult

